from conans import ConanFile
import os
import shutil
import re
import fnmatch

channel = os.getenv("CONAN_CHANNEL", "testing")
username = os.getenv("CONAN_USERNAME", "jandal")

class @!name!@Conan(ConanFile):
    name = '@!name!@'
    version = '@!version!@'
    url = '@!meta.url!@'
    settings = 'os', 'compiler', 'arch', 'build_type'
    options = {
        'shared': [True, False]
        , 'cxxstd': ['auto', 'c++11', 'c++14', 'c++1z']
    }
    default_options = '''
shared=True
cxxstd=auto
'''
    license = '@!meta.license!@'
    author = '@!meta.author!@'

    @staticmethod
    def __parse_simple_qmake(file):
        with open(file) as f:
            split_lines = [line.strip().split(' ') for line in f.readlines()]
            return {line[0]: line[2:] for line in split_lines if line[1] == '='}

    def requirements(self):
        self.requires.add('@!src!@/@!version!@@{}/{}'.format(username, channel), private=True)
        <!--(for dep in default('selfdependencies', []))-->
        self.requires('@!dep!@/@!version!@@{}/{}'.format(username, channel))
        <!--(end)-->

    def configure(self):
        self.options['@!src!@'].shared = self.options.shared
        self.options['@!src!@'].cxxstd = self.options.cxxstd

    def imports(self):
        shutil.rmtree('tmp', ignore_errors=True)
        os.mkdir('tmp')
        self.copy('*@!name!@*.prl', src='lib', dst='tmp/lib', root_package='@!src!@')
        self.copy('*@!name!@*.la', src='lib', dst='tmp/lib', root_package='@!src!@')
        self.copy('*@!name!@*.lib', src='lib', dst='tmp/lib', root_package='@!src!@')
        self.copy('*@!name!@*.dylib', src='lib', dst='tmp/lib', root_package='@!src!@')
        self.copy('*@!name!@*.a', src='lib', dst='tmp/lib', root_package='@!src!@')
        self.copy('*@!name!@*.so*', src='lib', dst='tmp/lib', root_package='@!src!@')
        self.copy('*@!name!@*.dll', src='bin', dst='tmp/bin', root_package='@!src!@')
        <!--(for cmakedir in default('cmakedirs', [name]))-->
        self.copy('*.cmake', src='lib/cmake/@!cmakedir!@', dst='tmp/lib/cmake/@!cmakedir!@', root_package='@!src!@')
        <!--(end)-->
        self.copy('@!name!@.pc', src='lib/pkgconfig', dst='tmp/lib/pkgconfig', root_package='@!src!@')
        <!--(for incldir in default('includedirs', [name.replace('Qt5', 'Qt')]))-->
        self.copy('*', src='include/@!incldir!@', dst='tmp/include/@!incldir!@', root_package='@!src!@')
        <!--(end)-->
        <!--(for other in default('otherdirs', []))-->
        self.copy('*', src='@!other!@', dst='tmp/@!other!@', root_package='@!src!@')
        <!--(end)-->
        <!--(for other in default('otherfiles', []))-->
        self.copy(os.path.basename('@!other!@'), src=os.path.dirname('@!other!@'), dst='tmp/' + os.path.dirname('@!other!@'), root_package='@!src!@')
        <!--(end)-->
        self.copy('*', src='mkspecs/modules', dst='tmp/mkspecs/modules', root_package='@!src!@')
        self.copy('*', src='plugins', dst='tmp/plugins', root_package='@!src!@')
        self.copy('*', src='doc/@!name.replace('Qt5', 'Qt').lower()!@', dst='tmp/doc/@!name.replace('Qt5', 'Qt').lower()!@', root_package='@!src!@')
        self.copy('@!name.replace('Qt5', 'Qt').lower()!@.qch', src='doc', dst='tmp/doc', root_package='@!src!@')

        extension = '.exe' if self.settings.os == 'Windows' else ''
        <!--(for exe in default('executables', []))-->
        self.copy('@!exe!@' + extension, src='bin', dst='tmp/bin', root_package='@!src!@')
        <!--(end)-->

    def build(self):
        def replace_in(filename, pattern, replacement):
            f = open(filename, 'r')
            data = f.read()
            f.close()
            data = re.sub(pattern, replacement, data)
            with open(filename, 'w') as f:
                f.write(data)
        def is_in_otherfiles(file):
            for other in @!default('otherfiles', [])!@:
                if fnmatch.fnmatch(file, os.path.basename(other)):
                    return True
            return False

        shutil.copytree('tmp', 'pkg')
        if os.path.isdir('pkg/mkspecs/modules'):
            for file in os.listdir('pkg/mkspecs/modules'):
                if file.endswith('qt_lib_@!mkspecname!@.pri') or file.endswith('qt_lib_@!mkspecname!@_private.pri') or is_in_otherfiles(file):
                    replace_in('pkg/mkspecs/modules/' + file,
                               r'\$\$QT_MODULE_LIB_BASE',
                               '$$PWD/../../lib')
                    replace_in('pkg/mkspecs/modules/' + file,
                               r'\$\$QT_MODULE_INCLUDE_BASE',
                               '$$PWD/../../include')
                else:
                    os.remove('pkg/mkspecs/modules/' + file)

            if os.path.isfile('pkg/mkspecs/modules/qt_lib_@!mkspecname!@.pri'):
                module_pri = self.__parse_simple_qmake('pkg/mkspecs/modules/qt_lib_@!mkspecname!@.pri')
                if 'QT.@!mkspecname!@.plugin_types' in module_pri:
                    for plugin_type_dir in os.listdir('pkg/plugins'):
                        if plugin_type_dir not in module_pri['QT.@!mkspecname!@.plugin_types']:
                            shutil.rmtree('pkg/plugins/' + plugin_type_dir)

        qt5coreconfigextrasmkspecdir_file = 'pkg/lib/cmake/Qt5Core/Qt5CoreConfigExtrasMkspecDir.cmake'
        if os.path.isfile(qt5coreconfigextrasmkspecdir_file):
            replace_in(qt5coreconfigextrasmkspecdir_file,
                       r'set\(_qt5_corelib_extra_includes ".*/Qt5Everything/',
                       'set(_qt5_corelib_extra_includes "${CMAKE_CURRENT_LIST_DIR}/../../../')

        qt5config_file = 'pkg/lib/cmake/Qt5/Qt5Config.cmake'
        if os.path.isfile(qt5config_file):
            replace_in(qt5config_file,
                       r'PATHS "\$\{_qt5_install_prefix\}" NO_DEFAULT_PATH',
                       'PATHS "${_qt5_install_prefix}"')

        if os.path.isdir('pkg/lib/cmake'):
            for module in os.listdir('pkg/lib/cmake'):
                replace_in('pkg/lib/cmake/{}/{}Config.cmake'.format(module, module),
                           r'PATHS "\$\{CMAKE_CURRENT_LIST_DIR\}/.." NO_DEFAULT_PATH',
                           'PATHS "${CMAKE_CURRENT_LIST_DIR}/.."')

    def package(self):
        self.copy('*', src='pkg', dst='.', keep_path=True)

    def package_info(self):
        def is_internal_linkflag(flag):
            return flag.startswith('-lQt5') or (flag.startswith('-L') and flag.endswith('lib') and 'Qt5' in flag)

        <!--(for incldir in default('includedirs', [name.replace('Qt5', 'Qt')]))-->
        self.cpp_info.includedirs.append('@!incldir!@')
        <!--(end)-->
        <!--(if not default('executables', None) is None)-->
        self.cpp_info.bindirs.append('bin')
        <!--(end)-->
