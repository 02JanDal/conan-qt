from conans import ConanFile, CMake
import os

channel = os.getenv("CONAN_CHANNEL", "testing")
username = os.getenv("CONAN_USERNAME", "jandal")

class @!name!@TestConan(ConanFile):
    name = '@!name!@Test'
    version = '@!version!@'
    settings = 'os', 'compiler', 'build_type', 'arch'
    requires = '@!name!@/@!version!@@{}/{}'.format(username, channel)<!--(for dep in default('test.extradeps', []))-->, '@!dep!@/@!version!@@{}/{}'.format(username, channel)<!--(end)-->
    generators = 'cmake', 'qmake'

    def imports(self):
        self.copy(pattern='*.dll', dst='bin', src='bin')
        self.copy(pattern='*.dylib', dst='bin', src='lib')
        self.copy(pattern='qmake', dst='bin', src='bin')
        self.copy(pattern='*', dst='bin', src='qml')

    def build(self):
        if os.path.isfile('../../test.pro') and False:
            qmake_build_dir = os.path.join(os.getcwd(), 'qmake_build')
            os.makedirs(qmake_build_dir)
            self.run('{} ../../../'.format(os.path.join(os.getcwd(), 'bin', 'qmake')), cwd=qmake_build_dir)
            self.run('make', cwd=qmake_build_dir)

        if len(os.listdir(self.conanfile_directory)) > 4 and os.path.isfile('../../CMakeLists.txt'):
            cmake = CMake(self.settings)
            self.run('cmake {} {}'.format(self.conanfile_directory, cmake.command_line))
            self.run('cmake --build . {}'.format(cmake.build_config))

    def test(self):
        if len(os.listdir(self.conanfile_directory)) > 4 and os.path.isfile('../../CMakeLists.txt'):
            cmake = CMake(self.settings)
            self.run('cmake --build . --target test {}'.format(cmake.build_config))