from conans import ConanFile
<!--(if 'tar' in src or 'zip' in src)-->from conans.tools import download, check_md5<!--(end)-->
<!--(if 'zip' in src)-->from conans.tools import unzip<!--(end)-->
<!--(if 'tar' in src)-->import tarfile<!--(end)-->
import os
import shutil

channel = os.getenv("CONAN_CHANNEL", "testing")
username = os.getenv("CONAN_USERNAME", "02jandal")

class @!name!@Conan(ConanFile):
    name = '@!name!@'
    version = '@!version!@'
    url = '@!meta.url!@'
    settings = 'os', 'compiler', 'arch', 'build_type'
    options = {
        'shared': [True, False]
        , 'cxxstd': ['auto', 'c++11', 'c++14', 'c++1z']
    }
    default_options = '''
shared=True
cxxstd=auto
'''
    license = '@!meta.license!@'
    author = '@!meta.author!@'

    __srcdir = '@!name!@'

    def source(self):
        <!--(if 'tar' in src and 'file' in src.tar)-->
        self.output.info('Copying @!src.tar.file!@')
        tarfilename = '@!src.tar.file!@'.rsplit(sep='/', maxsplit=1)[1]
        shutil.copyfile('@!src.tar.file!@', tarfilename)
        <!--(elif 'tar' in src and 'url' in src.tar)-->
        self.output.info('Downloading @!src.tar.url!@')
        tarfilename = '@!src.tar.url!@'.rsplit(sep='/', maxsplit=1)[1]
        download('@!src.tar.url!@', tarfilename)
        <!--(end)-->
        <!--(if 'tar' in src)-->
        self.output.info('Checking MD5')
        check_md5(tarfilename, '@!src.tar.md5!@')
        tar = tarfile.open(tarfilename)
        self.output.info('Extracting archive')
        tar.extractall()
        tar.close()
        shutil.move('@!src.tar.root!@', self.__srcdir)
        os.unlink(tarfilename)
        <!--(elif 'zip' in src)-->
        self.output.info('Downloading @!src.zip.url!@')
        zipfilename = '@!src.zip.url!@'.rsplit(sep='/')[0]
        download('@!src.zip.url!@', zipfilename)
        self.output.info('Checking MD5')
        check_md5(zipfilename, '@!src.tar.md5!@')
        self.output.info('Extracting archive')
        unzip(zipfilename)
        shutil.move('@!src.zip.root!@', self.__srcdir)
        os.unlink(zipfilename)
        <!--(elif 'git' in src)-->
        self.output.info('Cloning Git repository')
        self.run('git clone @!src.git.url!@ {}'.format(self.__srcdir))
        <!--(end)-->

    def requirements(self):
        <!--(for dep in default('selfdependencies', []))-->
        self.requires('@!dep!@/@!version!@@{}/{}'.format(username, channel))
        <!--(else)-->
        pass
        <!--(end)-->

    def config(self):
        pass

    def build(self):
        configurecmd = 'configure.bat' if self.settings.os == 'Windows' else './configure'
        configureflags = ['-opensource', '-confirm-license', '-silent']

        if self.settings.build_type == 'Debug':
            configureflags.append('-debug')
        else:
            configureflags.append('-release')

        configureflags.append('-c++std {}'.format(self.options.cxxstd))

        if self.options.shared:
            configureflags.append('-shared')
        else:
            configureflags.append('-static')

        if self.settings.os == 'Macos':
            configureflags.append('-no-framework')

        configureflags.append('-nomake examples')

        <!--(if exists('configflags'))-->
        configureflags.append('@!configflags!@')
        <!--(end)-->

        self.output.info('Running configure script')
        self.run('{} {}'.format(configurecmd, ' '.join(configureflags)), cwd=self.__srcdir)
        self.output.info('Building')
        self.run('make', cwd=self.__srcdir)

    def package(self):
        pass